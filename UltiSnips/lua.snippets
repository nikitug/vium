snippet f "Anonymous function"
function(${1:})
	$0
end
endsnippet

snippet r "Return"
return $0
endsnippet

snippet !fu(n(c(tion)?)?)?! "New function" r
function ${1:name}(${2:})
	$0
end
endsnippet

snippet forp "pair for loop" b
for ${1:name}, ${2:val} in pairs(${3:table_name}) do
	$0
end
endsnippet

snippet fori "ipair for foop" b
for ${1:idx}, ${2:val} in ipairs(${3:table_name}) do
	$0
end
endsnippet

snippet for "numeric for loop" b
for ${1:i}=${2:first},${3:last}${4/^..*/(?0:,:)/}${4:step} do
	$0
end
endsnippet

snippet do "do block"
do
	$0
end
endsnippet

snippet repeat "repeat loop" b
repeat
	$1
until $0
endsnippet

snippet while "while loop" b
while $1 do
	$0
end
endsnippet

snippet if "if statement" b
if $1 then
	$0
end
endsnippet

snippet ife "if/else statement" b
if $1 then
	$2
else
	$0
end
endsnippet

snippet eif "if/elseif statement" b
if $1 then
	$2
elseif $3 then
	$0
end
endsnippet

snippet eife "if/elseif/else statement" b
if $1 then
	$2
elseif $3 then
	$4
else
	$0
end
endsnippet

snippet pcall "pcall statement" b
local ok, result = pcall(${1:your_function})
if not ok then
	$0
end
endsnippet

##########################
# Debug
##########################

snippet pins "print inspect" b
print(inspect($0))
endsnippet

##########################
# Busted
##########################

snippet !ins(ulate)?! "Busted: insulate" br
insulate('${1:name}', function()
	$0
end)
endsnippet

snippet !des(c(ribe)?)?! "Busted: describe" br
describe('${1:name}', function()
	$0
end)
endsnippet

snippet !con(t(ext)?)?! "Busted: context" br
context('${1:name}', function()
	$0
end)
endsnippet

snippet it "Busted: it" b
it(function()
	$0
end)
endsnippet

snippet itn "Busted: it with name" b
it('${1:name}', function()
	$0
end)
endsnippet

snippet !bef(ore)?! "Busted: before each" br
before_each(function()
	$0
end)
endsnippet

snippet aeq "Busted: assert.equal" b
assert.equal($0)
endsnippet
